// Ratios
$golden: 1.618 
$octave: (2 / 1)
$major-seventh: (15 / 8)
$minor-seventh: (16 / 9)
$major-sixth: (5 / 3)
$minor-sixth: (8 / 5)
$fifth: (3 / 2)
$fourth: (4 / 3)
$major-third: (5 / 4)
$minor-third: (6 / 5)
$major-second: (9 / 8)
$minor-second: (16 / 15)

// Defaults
$ratio: $golden !default
$base-size: 12px !default
$property: font-size !default
$class-slug: ms !default

// Modular Scale function
@function modular-scale($multiple, $base-size, $ratio)
  // On init, $modular-scale equals the default value of $base-size or the value passed to the function
  $modular-scale: $base-size
  
  @debug type-of($ratio)
  @if type-of($ratio) == 'list'
    $concatenate: ()
    @if $multiple > 0
      $j: 1
      
      @while $j <= length($ratio)
        $modular-scale: $base-size
        @for $i from 1 through $multiple
          $modular-scale: $modular-scale * nth($ratio, $j)
          $concatenate: append($concatenate, $modular-scale)
        $j: $j + 1
        
      @debug '$concatenate -> ' $concatenate
      
      // sort acsending
      // built-in list sorting in Sass would make this go away.
      $new-order: ()
      $temp: ()
      $temp: join($temp, $concatenate)
      
      @for $k from 1 through length($concatenate)
        // impossibly high starter value
        $low: 1000000
        
        @for $l from 1 through length($temp)
          @if nth($temp, $l) < $low
            $low: nth($temp, $l)
        
        $new-order: append($new-order, $low)
        $temp: ()
        @for $m from 1 through length($concatenate)
          @if nth($concatenate, $m) > $low
            $temp: append($temp, nth($concatenate, $m))
        @debug 'Ã¸ $temp --> ' $temp
      @debug '$new-order --> ' $new-order
      @debug nth($new-order, 1)




  // remove these for now
    // If $multiple is a positive integer (up the scale)
    @if $multiple > 0
      @for $i from 1 through $multiple
        $modular-scale: $modular-scale * $ratio

    // If $multiple is a negative integer (down the scale)
    @if $multiple < 0
      @for $i from 1 through ($multiple * -1)
        $modular-scale: $modular-scale / $ratio

  // Return the new or unchanged value of $modular-scale
  @return $modular-scale
  
// Shortcut
@function ms($multiple, $base-size, $ratio)
  // Return the value from the Modular Scale function
  @return modular-scale($multiple, $base-size, $ratio)

// Mixin
=modular-scale($property, $multiple, $base-size, $ratio)
  // Print the $property and return the value from the Modular Scale function
  #{$property}: modular-scale($multiple, $base-size, $ratio)

// Classes Mixin
=modular-scale-classes($multiple, $property)

  // Loop from 0 through the value of $multiple and generate a range of classes
  @for $i from 0 through $multiple
    .#{$class-slug}-#{$i}
      +modular-scale($property, $i)